package org.firstinspires.ftc.teamcode.auton;
import java.lang.Math;

import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.IMU;
import com.qualcomm.robotcore.hardware.ImuOrientationOnRobot;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AngularVelocity;
import org.firstinspires.ftc.robotcore.external.navigation.YawPitchRollAngles;

import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.teamcode.PIDController;
import org.firstinspires.ftc.teamcode.hardwareMap;

@TeleOp(name = "OdomDrive")
public class OdomDrive extends LinearOpMode {

    hardwareMap robot       = new hardwareMap(this);
    IMU imu;
    double botHeading;

    public static final double PI = 3.141592653589793;

    private ElapsedTime runtime = new ElapsedTime();

    double yposition = 0;
    //double xposition = 0;

    public static double DISTANCE_BTW_ENCODERS = 17;      //in inches

    public static double TICKS_PER_REV = 8192;          //**for REV encoder=8192
    public static double WHEEL_RADIUS = (35.0 / 2.0) / 25.4; // in        //**35mm diameter
    public static double GEAR_RATIO = 1; // output (wheel) speed / input (encoder) speed, 1 for no gear

    public static double encoderTicksToInches(double ticks) {
        return WHEEL_RADIUS * 2 * Math.PI * GEAR_RATIO * ticks / TICKS_PER_REV;
    }

    double tickHalfDifference = 0;
    double absoluteRobotAngleDegree = 0;
    int sign = 1;
    double robotAngle = 0;
    double radianRobotAngle = 0;
    double tickHalfDifferenceInInches = 0;

    double ThirdOdometryRobotRadius = 6.4;   //distance from robot center to outermost odometry wheel in inches
    double robotAngleDegree_ThirdOdometryWheel = 0;

    @Override
    public void runOpMode() throws InterruptedException {
        // initialize all the hardware, using the hardware class.
        robot.init();

        imu = hardwareMap.get(IMU.class, "imu");
        //ImuOrientationOnRobot RevHubOrientationOnRobot = null;
//*        RevHubOrientationOnRobot.LogoFacingDirection logoDirection = RevHubOrientationOnRobot.LogoFacingDirection.UP;
//*        RevHubOrientationOnRobot.UsbFacingDirection  usbDirection  = RevHubOrientationOnRobot.UsbFacingDirection.FORWARD;
//*        RevHubOrientationOnRobot orientationOnRobot = new RevHubOrientationOnRobot(logoDirection, usbDirection);
//*        imu.initialize(new IMU.Parameters(orientationOnRobot));


            //watch for sign of each Encoder position
            yposition = (encoderTicksToInches(robot.LFMotor.getCurrentPosition()) - encoderTicksToInches(robot.RFMotor.getCurrentPosition())) / 2;
//          telemetry.addData("The X-Axis position = ",xposition);
            telemetry.addData("The Y-Axis position outside loop in inches = ","%.2f",yposition);
            telemetry.update();


        waitForStart();
//        DcMotor LFMotor = hardwareMap.dcMotor.get("LFMotor");
//
//        LFMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        if (isStopRequested()) return;

        while (opModeIsActive()) {

        //    drive("forward", 0.2, 0, 10);

            if (gamepad1.dpad_up) {
                drive("forward", 0.3, 0, 20);
            } else if (gamepad1.dpad_down) {
                drive("backward", 0.3, 8, 10);
            } else if (gamepad1.dpad_right) {
                drive("right", 0.3, 8, 10);
            } else if (gamepad1.dpad_left) {
                drive("backward", 0.3, 8, 10);
            }


            tickHalfDifference = Math.abs(robot.LFMotor.getCurrentPosition()-Math.abs((robot.LFMotor.getCurrentPosition() - robot.RFMotor.getCurrentPosition())/2));
            tickHalfDifferenceInInches = encoderTicksToInches(tickHalfDifference);
            radianRobotAngle = tickHalfDifferenceInInches/(DISTANCE_BTW_ENCODERS/2);
            absoluteRobotAngleDegree = radianRobotAngle*180/PI;
                //absoluteRobotAngle = Math.toDegrees(1.57079);
            if (Math.abs(encoderTicksToInches(robot.LFMotor.getCurrentPosition())) < Math.abs(encoderTicksToInches(robot.RFMotor.getCurrentPosition()))) {
                //travel forward more by right side
                sign = +1;
            }else{
                sign = -1;
            }
            robotAngle = sign*absoluteRobotAngleDegree;

            double robotAngleDegree_ThirdOdometryWheel = Math.toDegrees(encoderTicksToInches(robot.LBMotor.getCurrentPosition())/(ThirdOdometryRobotRadius));



            double Yposition = (encoderTicksToInches(robot.LFMotor.getCurrentPosition()) - encoderTicksToInches(robot.RFMotor.getCurrentPosition())) / 2;
//          telemetry.addData("The X-Axis position = ",xposition);

            telemetry.addData("Y-Axis position in inches (main, manual loop) = ", "%.2f", Yposition);
            telemetry.addData("Y-Axis position in ticks LFMotor = ", robot.LFMotor.getCurrentPosition());
            telemetry.addData("Y-Axis position in ticks RMotor = ", robot.RFMotor.getCurrentPosition());
            telemetry.addData("tickDifference = ", tickHalfDifference);
            telemetry.addData("tickHalfDifferenceInInches = ", "%.2f", tickHalfDifferenceInInches);
            telemetry.addData("radianRobotAngle (radian)= ", "%.2f", radianRobotAngle);
            telemetry.addData("absoluteRobotAngle (degree)= ", "%.1f", absoluteRobotAngleDegree);
            telemetry.addData("Robot Angle by side Encoders (degree) = ", "%.1f", robotAngle);
            telemetry.addLine(" ");
            telemetry.addData("3rd Encoder--Ticks = ", robot.LBMotor.getCurrentPosition());
            telemetry.addData("3rd Encoder--Inches = ", "%.2f", encoderTicksToInches(robot.LBMotor.getCurrentPosition()));
            telemetry.addData("Robot Angle by 3rd Encoder (degree)", "%.1f", robotAngleDegree_ThirdOdometryWheel);
            telemetry.addLine(" ");

// Create an object to receive the IMU angles
            YawPitchRollAngles robotOrientation;
            robotOrientation = imu.getRobotYawPitchRollAngles();
// Now use these simple methods to extract each angle
            double Yaw   = robotOrientation.getYaw(AngleUnit.DEGREES);
            double Pitch = robotOrientation.getPitch(AngleUnit.DEGREES);
            double Roll  = robotOrientation.getRoll(AngleUnit.DEGREES);
            telemetry.addData("Robot Angle by IMU: Yaw (Z)", "%.1f Deg.", Yaw);
            //telemetry.addData("Pitch (X)", "%.2f Deg.", Pitch);
            //telemetry.addData("Roll (Y)", "%.2f Deg.\n", Roll);
            //telemetry.addData("Yaw (Z) velocity", "%.2f Deg/Sec", angularVelocity.zRotationRate);
            //telemetry.addData("Pitch (X) velocity", "%.2f Deg/Sec", angularVelocity.xRotationRate);
            //telemetry.addData("Roll (Y) velocity", "%.2f Deg/Sec", angularVelocity.yRotationRate);
            telemetry.update();


            //This is for manual control.
            double y = gamepad1.left_stick_y; // Remember, this is reversed!
            double x = -gamepad1.left_stick_x * 1.1; // Counteract imperfect strafing
            double rx = -gamepad1.right_stick_x;

            //reduce motor speed to 50% max
            double motorPowerFactor = 0.5;
            double powerChange;

            //Decrease power with left TRIGGER (lower of the top side button) press with the other gamepad stick.
            if ((Math.abs(gamepad1.left_stick_y) > 0.1 && gamepad1.left_trigger>0.1) || (Math.abs(gamepad1.left_stick_x) > 0.1 && gamepad1.left_trigger>0.1) ||  (Math.abs(gamepad1.right_stick_x) > 0.1 && gamepad1.left_trigger>0.1)) {
                powerChange = -0.2;
                //Increase power with left TRIGGER (lower of the top side button) press with the other gamepad stick.
            } else if ((Math.abs(gamepad1.left_stick_y) > 0.1 && gamepad1.right_bumper) || (Math.abs(gamepad1.left_stick_x) > 0.1 && gamepad1.right_trigger>0.1) || (Math.abs(gamepad1.right_stick_x) > 0.1 && gamepad1.left_bumper)) {
                powerChange = 0.2;
            } else{powerChange = 0;}

            botHeading = robotOrientation.getYaw(AngleUnit.RADIANS);
            // Rotate the movement direction counter to the bot's rotation
            double rotX = x * Math.cos(-botHeading) - y * Math.sin(-botHeading);
            double rotY = x * Math.sin(-botHeading) + y * Math.cos(-botHeading);

            // Denominator is the largest motor power (absolute value) or 1
            // This ensures all the powers maintain the same ratio, but only when
            // at least one is out of the range [-1, 1]
            double denominator = Math.max(Math.abs(rotY) + Math.abs(rotX) + Math.abs(rx), 1);
            double frontLeftPower = (motorPowerFactor + powerChange) * (rotY + rotX + rx) / denominator;
            double backLeftPower = (motorPowerFactor + powerChange) * (rotY - rotX + rx) / denominator;
            double frontRightPower = (motorPowerFactor + powerChange) * (rotY - rotX - rx) / denominator;
            double backRightPower = (motorPowerFactor + powerChange) * (rotY + rotX - rx) / denominator;


            robot.setMotorPower(frontRightPower, frontLeftPower, backRightPower, backLeftPower);

//            robot.LFMotor.setPower(frontLeftPower);
//            robot.LBMotor.setPower(backLeftPower);
//            robot.RFMotor.setPower(frontRightPower);
//            robot.RBMotor.setPower(backRightPower);
//            robot.LFMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
//            robot.RFMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
//            robot.RBMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
//            robot.LBMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        }
    }




    //Setup gamepad input to send to motors
    void drive(String direction, double power, double targetX, double targetY) {
        //direction=forward, backward, right, left, turnRight, turnLeft; power [-1,+1]; time in seconds
        double x = 0;
        double y = 0;
        double rx = 0;
        double tickDifference = 0;
        double absoluteRobotAngle = 0;
        int sign = 1;
        double robotAngle = 0;

        double yposition = 0;
        //double motorPower = 0;

        PIDController pidDistanceToTarget = new PIDController(targetY, 0.05 , 0 , 0.000);

        if (direction == "forward" ) {
                y = -1;
                x = 0;
                rx = 0;
        } else if (direction == "backward") {
            //while (opModeIsActive() && (targetY > yposition)) {
                y = 1;
                x = 0;
                rx = 0;
            //}
        } else if (direction == "right") {
            //while (opModeIsActive() && (targetX < xposition)) {
                y = 0;
                x = -1;
                rx = 0;
            //}
        } else if (direction == "left") {
            //while (opModeIsActive() && (targetY > xposition)) {
                y = 0;
                x = 1;
                rx = 0;
            //}
        } else if (direction == "turnRight") {
            y = 0;
            x = 0;
            rx = -1;
        } else if (direction == "turnLeft") {
            y = 0;
            x = 0;
            rx = 1;
        }
//            DcMotor LFMotor = hardwareMap.dcMotor.get("LFMotor");
//            DcMotor LBMotor = hardwareMap.dcMotor.get("LBMotor");
//            DcMotor RFMotor = hardwareMap.dcMotor.get("RFMotor");
//            DcMotor RBMotor = hardwareMap.dcMotor.get("RBMotor");
//            RBMotor.setDirection(DcMotorSimple.Direction.REVERSE);
//            RFMotor.setDirection(DcMotorSimple.Direction.REVERSE);
//            LBMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

//            LFMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
//            LFMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        //    yposition = (encoderTicksToInches(robot.LFMotor.getCurrentPosition()) - encoderTicksToInches(robot.RFMotor.getCurrentPosition())) / 2;

        while (opModeIsActive() && (yposition < targetY))  {

            power = pidDistanceToTarget.update(yposition);

            double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
            double frontLeftPower = (y + x + rx) / denominator;
            double backLeftPower = (y - x + rx) / denominator;
            double frontRightPower = (y - x - rx) / denominator;
            double backRightPower = (y + x - rx) / denominator;
            robot.LFMotor.setPower(power * frontLeftPower);
            robot.LBMotor.setPower(power * backLeftPower);
            robot.RFMotor.setPower(power * frontRightPower);
            robot.RBMotor.setPower(power * backRightPower);

//        runtime.reset();
            tickDifference = Math.abs(encoderTicksToInches(robot.LFMotor.getCurrentPosition())) - Math.abs(encoderTicksToInches(robot.RFMotor.getCurrentPosition()));
            absoluteRobotAngle = Math.toDegrees(1.571-(encoderTicksToInches(tickDifference/2))/(2*DISTANCE_BTW_ENCODERS/2));
            if (Math.abs(encoderTicksToInches(robot.LFMotor.getCurrentPosition())) < Math.abs(encoderTicksToInches(robot.RFMotor.getCurrentPosition()))) {
                sign = -1;
            }else{
                sign = +1;
            }
            robotAngle = sign*absoluteRobotAngle;

            yposition = (encoderTicksToInches(robot.LFMotor.getCurrentPosition()) - encoderTicksToInches(robot.RFMotor.getCurrentPosition())) / 2;
//              telemetry.addData("The X-Axis position = ",xposition);
            telemetry.addData("Target Y position in inches= ", "%.2f", targetY);
            telemetry.addData("Y-Axis position in inches (in drive loop) = ", "%.2f", yposition);
            telemetry.addData("Robot Angle (in degree) = ", "%.2f", robotAngle);
            telemetry.addData("Y-Axis position in ticks LFMotor = ", robot.LFMotor.getCurrentPosition());
            telemetry.addData("Y-Axis position in ticks RMotor = ", robot.RFMotor.getCurrentPosition());
            telemetry.update();
        }

        robot.LFMotor.setPower(0);
        robot.LBMotor.setPower(0);
        robot.RBMotor.setPower(0);
        robot.RFMotor.setPower(0);
    }

}
